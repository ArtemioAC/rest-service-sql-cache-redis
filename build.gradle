buildscript {
	ext {
		springBootVersion = '2.1.5.RELEASE'
		springBootAdminVersion = '2.1.0'
		dockerRegistryUsername = 'fabrica-digital-278818'
		dockerRegistryHost = 'gcr.io'
	}
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath ("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
		classpath "com.bmuschko:gradle-docker-plugin:6.6.0"
		classpath "at.phatbl:shellexec:1.5.2"
	}
}

repositories {
	mavenCentral()
	jcenter()
	maven {
		url "https://packages.confluent.io/maven/"
	}
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'org.sonarqube'

group = 'com.infosel.daas'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.11'


dependencies {
	implementation('org.springframework.boot:spring-boot-starter:2.1.2.RELEASE')
	implementation('org.springframework.boot:spring-boot-starter-web:2.1.5.RELEASE')
	implementation('org.springframework.boot:spring-boot-starter-actuator:2.1.5.RELEASE')

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'mysql:mysql-connector-java'


	implementation('org.springframework.boot:spring-boot-starter-data-redis:2.3.4.RELEASE')

	implementation('io.micrometer:micrometer-registry-prometheus:1.1.4')
	compileOnly 'org.projectlombok:lombok:1.18.8'
	annotationProcessor 'org.projectlombok:lombok:1.18.8'
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'

	testImplementation('org.springframework.boot:spring-boot-starter-test:2.1.2.RELEASE')
	testCompile('org.junit.jupiter:junit-jupiter:5.4.0')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR1"
	}
}

task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
	dependsOn assemble
	destFile = project.file('build/libs/Dockerfile')
	from 'mcr.microsoft.com/java/jdk:11-zulu-centos'
	copyFile "${rootProject.name}-${project.version}.jar", "/opt/${rootProject.name}.jar"
	label(['maintainer': 'Meltsan Solutions'])
	exposePort 8739
	entryPoint 'java', "-Djava.awt.headless=true", "-Xms512m", "-Xmx1550m", '-jar', "/opt/${rootProject.name}.jar"
}

task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {

	dependsOn createDockerfile
	def repositoryName = project.name.replace(' ', '').toLowerCase()
	println "Name: '${repositoryName}'"
	inputDir.set(project.file('./build/libs'))
	def registryOwner = (System.getenv('DOCKER_BUILDER_USERNAME_DAAS') ?: (project.hasProperty('dockerRegistryUsername') ? dockerRegistryUsername : '')) ?: ''

	if(!registryOwner) {
		throw new RuntimeException('Se debe espeficar la siguiente variable de ambiente: DOCKER_BUILDER_USERNAME_DAAS')
	}

	println "Owner: '${registryOwner}'"

	def registryHost = (System.getenv('DOCKER_BUILDER_REGISTRY_HOST') ?: (project.hasProperty('dockerRegistryHost') ? dockerRegistryHost : '')) ?: ''

	if(registryHost) {
		registryHost = registryHost + "/"
	}

	def tagVersion = project.version
	def buildNumber = System.getenv('BUILD_NUMBER')
	if(buildNumber) {
		tagVersion += "_build_ci_${buildNumber}"
	}

	def finalTag = "${registryHost}${registryOwner}/${repositoryName}:${tagVersion}".toLowerCase()
	println "Created Image with tag: ${finalTag}"
	images.add(finalTag)
}

task pushImage(type: at.phatbl.shellexec.ShellExec) {
	def tag = buildImage.images.get()[0]
	command "docker push ${tag}"
}

task setTagImage(type: at.phatbl.shellexec.ShellExec) {
	def tag = buildImage.images.get()[0]
	command "export TAG=${tag}; envsubst < ./k8s/deployment.tpl > ./k8s/deployment.yaml"
}

task deploy(type: at.phatbl.shellexec.ShellExec) {
	def tag = buildImage.images.get()[0]
	command "export TAG=${tag}; envsubst < ./k8s/deployment.tpl > ./k8s/deployment.yaml; kubectl apply -f k8s/ -n daas"
}

task cleanTmpImage(type: at.phatbl.shellexec.ShellExec) {
	def tag = buildImage.images.get()[0]
	command "docker rmi ${tag}"
}


